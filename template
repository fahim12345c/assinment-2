1. test case---
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define ll long long
#define int long long int
#define endl "\n"
#define F first
#define S second
#define uni(x) x.erase(unique(all(x)), x.end())
#define deb(args...){string _s = #args;replace(_s.begin(), _s.end(), ',', ' ');stringstream _ss(_s);istream_iterator<string> _it(_ss);err(_it, args);}
#define all(v) v.begin(), v.end()
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>
#define multi_ordered_set tree<int, null_type,less_equal<int>, rb_tree_tag,tree_order_statistics_node_update>
#define index_of(x) order_of_key(x)
#define value_index(x) find_by_order(x)
ll modpow(ll a, ll b,ll m) {ll res = 1; while (b) {if (b & 1) res = res * a % m; a = a * a % m; b >>= 1;} return res;}
using namespace std;
using namespace __gnu_pbds;
template <typename T>
ostream &operator<<(ostream &os, const vector<T> &v)
{
    os << '{';
    for (const auto &x : v)
        os << " " << x;
    return os << '}';
}
void err(istream_iterator<string> it) {}
template <typename T, typename... Args>
void err(istream_iterator<string> it, T a, Args... args)
{
    cerr << *it << " = " << a << endl;
    err(++it, args...);
}
int dx[]={0, 0, 1, -1, 1, 1, -1, -1};
int dy[]={1, -1, 0, 0, 1, -1, 1, -1};
int hash58 = 288230376151711717;
int hash32 = 1610612741;
const int N=2e5+5,M=1e9+7;
void solve(int tt){
} 

int32_t main()
{
    #ifdef DEBUG
        //freopen("input.txt", "r", stdin);
        // freopen("output.txt","w", stdout);
    #else
        ios_base::sync_with_stdio(false);
        cin.tie(NULL); 
    #endif
    ll test_case = 1;
    cin>>test_case;
    for(int i = 1; i <= test_case; i++){
        solve(i);
    }
}



2.seive---

vector<int>lp(N),prime;
   void seive() {
        for (int i = 2; i < N; i++) lp[i] = i;
        for (int i = 2; i< N; i++)  {
                if (lp[i] == i) {
                   prime.push_back(i);
                        for (int j = 2 * i; j < N; j += i) {
                                if (lp[j] == j) lp[j] = i;
                        }
                }
        }
}

3.segment tree----


int seg[N * 4],ar[N],lazy[N*4];
void propagate(int node,int b,int e)
{
     if (b == e) {
        return;
    }
    int Left = node * 2;
    int Right = node * 2 + 1;
    int mid = (b + e) / 2;
    lazy[Left]+=lazy[node];
    lazy[Right]+=lazy[node];
    seg[Left]+=(mid-b+1)*lazy[node];
    seg[Right]+=(e-mid)*lazy[node];
    lazy[node]=0;
}
void init(int node, int b, int e)
{
    if (b == e) {
        seg[node] = ar[b];
        return;
    }
    int Left = node * 2;
    int Right = node * 2 + 1;
    int mid = (b + e) / 2;
    init(Left, b, mid);
    init(Right, mid + 1, e);
    seg[node] =seg[Left]+seg[Right];
}
int query(int node, int b, int e, int i, int j)
{
    if(lazy[node]!=0)
    {
        propagate(node,b,e);
    }
    if (i > e || j < b)
        return 0; 
    if (b >= i && e <= j)
        return seg[node];
    int Left = node * 2;
    int Right = node * 2 + 1;
    int mid = (b + e) / 2;
    int p1 = query(Left, b, mid, i, j);
    int p2 = query(Right, mid + 1, e, i, j);
    return p1+p2; 
}
void update(int node, int b, int e, int l,int r, int newvalue)
{
    if(lazy[node]!=0)
    {
        propagate(node,b,e);
    }
    if (l > e || r < b)
        return;
    if (b >= l && e <= r) { 
        seg[node]+= (e-b+1)*newvalue;
        lazy[node]+=newvalue;
        return;
    }
    int Left = node * 2; 
    int Right = node * 2 + 1;
    int mid = (b + e) / 2;
    update(Left, b, mid, l,r, newvalue);
    update(Right, mid + 1, e, l,r, newvalue);
    seg[node] = seg[Left]+seg[Right];
}

4.dsu---
int parent[N],sz[N];
int findrep(int u)
{
    if(parent[u]==u)
        return u;
    parent[u]=findrep(parent[u]);
    return parent[u] ;
}
void marge(int u,int v)
{
    u=findrep(u);
    v=findrep(v);
    if(u==v)
        return;
    if(sz[u]>sz[v])
        swap(u,v);
    parent[u]=v;
    sz[v]+=sz[u];
}
void reset(int n)
{
    for(int i=1;i<=n;i++)
        parent[i]=i,sz[i]=1;
}

5.factorial----

ll fact[200005], invfact[200005];
void factorial() {
        fact[0] = invfact[0] = 1;
        for (int i = 1; i < N; i++) {
                fact[i] = fact[i - 1] * i % M;
        }
        invfact[N - 1] = modpow(fact[N - 1], M - 2,M);
        for(int i = N - 2; i >= 0; i--) {
                invfact[i] = invfact[i + 1] * (i + 1) % M;
        }
}
ll ncr(ll n, ll r) {
        // if(n == r) return 1; //may be needed when n < 0 && r < 0 but n == r
        if (r < 0 || n < 0 || r > n) return 0;
        return (((fact[n] * invfact[n - r])%M)*invfact[r]) % M;
}

6.trie---

struct trie{
    trie *child[SIZE];
    bool isend;
    trie(){
        for(int i=0;i<SIZE;i++)child[i]=NULL;
        isend=false;
    }
};
void insert(trie *root,string s){
    trie *cur=root;
    for(int i=0;i<s.size();i++){
        int idx=s[i]-'a';
        if(cur->child[idx]==NULL)cur->child[idx]=new trie();
        cur=cur->child[idx];
    }
    cur->isend=true;
}
bool search(trie *root,string s){
    trie *cur=root;
    for(int i=0;i<s.size();i++){
        int idx=s[i]-'a';
        if(cur->child[idx]==NULL)return false;
        cur=cur->child[idx];
    }
    return cur->isend;
}
void delete_word(trie *root,string s){
    trie *cur=root;
    for(int i=0;i<s.size();i++){
        int idx=s[i]-'a';
        if(cur->child[idx]==NULL)return;
        cur=cur->child[idx];
    }
    cur->isend=false;
}

7.//matrix rotate 90

void rotateMatrix(vector<vector<int>>& matrix) {
    int m = matrix.size();
    int n = matrix[0].size();
    
    for (int i = 0; i < m/2; i++) {
        swap(matrix[i], matrix[m-i-1]);
    }
 
    for (int i = 0; i < m; i++) {
        for (int j = i+1; j < n; j++) {
            swap(matrix[i][j], matrix[j][i]);
        }
    }
}

8.lca  ---

vector<int> adj[N],depth(N),parent(N);
int up[N][20],lg;
void dfs(int node,int par){   
    for(auto child:adj[node]){
        if(child!=par){
            depth[child]=depth[node]+1;
            up[child][0]=node;
            for(int i=1;i<=19;i++){
              up[child][i]=up[up[child][i-1]][i-1];
            }
            dfs(child,node);
        }
    }
}
int lca(int u,int v){
    int val=0;
    if(depth[u]<depth[v]) swap(u,v);
    int diff=depth[u]-depth[v];
    for(int i=19;i>=0;i--){
        if(diff&(1<<i)){
            val+=1<<i;
            u=up[u][i];
        }
    }
    if(u==v) return u;
    for(int i=19;i>=0;i--){
        if(up[u][i]!=up[v][i]){
            val+=1<<(i+1);
            u=up[u][i];
            v=up[v][i];
        }
    }
    return up[u][0];
}
void solve(int tt){
    int n,i,q;
    cin>>n>>q;
    memset(up,0,sizeof(up));
    for(i=1;i<n;i++){
        int u,v;
        cin>>u>>v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    dfs(1,0);
    while(q--){
        int u,v;
        cin>>u>>v;
       // cout<<depth[u]<<" "<<depth[v]<<" ";
        cout<<lca(u,v)<<endl;
    }
} 

9---kmp

void solve(int tt){
    //cout<<"Case "<<tt<<": ";
    int i,cnt=0;
    string text,pat;
    cin>>text>>pat;
    int j=0,lps[pat.size()];
    lps[0]=0;
    for(i=1;i<pat.size();)
    {
        if(pat[i]==pat[j])
        {
            lps[i]=j+1;
            i++;
            j++;
        }
        else
        {
            if(j!=0)
            {
                j=lps[j-1];
            }
            else
            {
                lps[i]=0;
                i++;
            }
        }
    }
    i=0,j=0;
    while(i<text.size())
    {
        if(text[i]==pat[j])
        {
            i++,j++;
        }
        else
        {
            if(j!=0)
            {
                j=lps[j-1];
            }
            else
            {
                i++;
            }
        }
        if(j==pat.size())
        {
            cnt++;
            j=lps[j-1];
        }
    }
    cout<<cnt<<endl;
} 
